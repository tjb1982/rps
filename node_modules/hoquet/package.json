{
  "name": "hoquet",
  "description": "Simple templating loosely based on Clojure's Hiccup",
  "repository": {
    "type": "git",
    "url": "http://github.com/tjb1982/hoquet"
  },
  "version": "0.1.4",
  "main": "index.js",
  "devDependencies": {
    "chai": "*",
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha --no-colors --reporter spec"
  },
  "readme": "\n# hoquet\n\n  Simple JavaScript templating based on Clojure's Hiccup\n\n\n## Installation\n\nInstall with [component(1)](http://component.io):\n\n    $ component install tjb1982/hoquet\n\nInstall with npm:\n\n    $ npm install --save hoquet\n\n\n## Example\n```javascript\nvar http = require('http'),\n    h = require('hoquet');\n\nfunction layout(c) {\n  var out =\n    ['html',\n     ['head',\n      ['title', c.title],\n      h.styles('/css/reset.css',\n               '/css/style.css'),\n      c.head],\n     ['body', {'ng-app':'MyApp'}, c.body]];\n  \n  return out;\n}\n\nvar index = layout({\n  title: 'My Page',\n  body: ['div', {'ng-view':''},\n         ['h1', 'Hello world']],\n  head: [['meta', {'name':'description',\n                   'content':'Templating'}],\n         h.scripts('/js/lib/angular.min.js',\n                   '/js/lib/jquery.min.js')]\n});\n\nhttp.createServer(function(q,s) {\n  s.writeHead(200, {'Content-Type': 'text/html'});\n  s.end( h.doc('html5', index) );\n}).listen(8080);\n```\n\noutputs:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>My Page</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/reset.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/style.css\" />\n    <meta name=\"description\" content=\"Templating\" />\n    <script type=\"text/javascript\" src=\"/js/lib/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/lib/jquery.min.js\"></script>\n  </head>\n  <body ng-app=\"MyApp\">\n    <div ng-view=\"\">\n      <h1>Hello world</h1>\n    </div>\n  </body>\n</html>\n```\n\n## API\n\n### .render\n\nfunction that takes a structured array or a variable list of structured arrays and converts them to a String of HTML.\n\ne.g.\n\n```javascript\n\n    var hoquet = require('hoquet');\n    \n    hoquet.render(['p','foo'],['p','bar']);\n    // <p>foo</p><p>bar</p>\n    \n    hoquet.render([['p','foo'],['p','bar']]);\n    // <p>foo</p><p>bar</p>\n    \n    hoquet.render([[[[[['p','foo'],['p','bar']]]]]]);\n    // <p>foo</p><p>bar</p>\n\n    \n    hoquet.render(['p', 'This is a ', ['span', 'paragraph'], ' with a span']);\n    // <p>This is a <span>paragraph</span> with a span</p>\n\n    hoquet.render(['div',{id: 'foo', class: 'bar'}, null]);\n    //<div id=\"foo\" class=\"bar\"></div>\n\n    hoquet.render(['meta', {foo: 'bar'}]);\n    // <meta foo=\"bar\" />\n\n    hoquet.render(['ul', ['bread', 'milk', 'eggs'].map(function(x) {\n      return(['li', x]);\n    })]);\n    // <ul><li>bread</li><li>milk</li><li>eggs</li></ul>\n```\n\n> for more specifics, see `./test/test.js`\n\n### .scripts\n\nconvenience method for creating script tags by src attr\n\n### .styles\n\nconvenience method for creating style tags by href attr\n\n\n## Testing\n\nFrom the repo root:\n\n```\nnpm install\nnpm test\n```\n\n## License\n\nMIT\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/tjb1982/hoquet/issues"
  },
  "homepage": "https://github.com/tjb1982/hoquet",
  "_id": "hoquet@0.1.4",
  "_from": "hoquet@*"
}
